/* Generated by AN DISI Unibo */ 
package it.unibo.sonar_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Sonar_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				lateinit var reader : java.io.BufferedReader
				var working = false
			    lateinit var process : Process	
			    var Distance = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name starts")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handle_sonar_start",cond=whenDispatch("sonar_start"))
				}	 
				state("handle_sonar_start") { //this:State
					action { //it:State
						
						    	working = true		
								process = Runtime.getRuntime().exec("python sonar.py")
								reader  = java.io.BufferedReader(  java.io.InputStreamReader(process.getInputStream() ))	
						CommUtils.outblue("SONAR starts")
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="read_sonar_data", cond=doswitch() )
				}	 
				state("read_sonar_data") { //this:State
					action { //it:State
						 
								var data = reader.readLine()
								CommUtils.outyellow("$name with python: data = $data"   ) 
								if( data != null ){
									try { 
										val vd = data.toFloat()
										val v  = vd.toInt()
										
										Distance=v;
									} catch(e: Exception){
											CommUtils.outred("$name readSonarDataERROR: $e "   )
									}
								}
								
						emitLocalStreamEvent("sonar_data", "distance($Distance)" ) 
						forward("do_read", "do_read(1)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handle_sonar_stop",cond=whenDispatch("sonar_stop"))
					transition(edgeName="t05",targetState="read_sonar_data",cond=whenDispatchGuarded("do_read",{ working   
					}))
					transition(edgeName="t06",targetState="end_of_read",cond=whenDispatchGuarded("do_read",{ !working  
					}))
				}	 
				state("end_of_read") { //this:State
					action { //it:State
						
						   	    process.destroy()
						    	if (process.isAlive()) {
						    	    process.destroyForcibly();
						    	}
						       	CommUtils.outred("$tt $name | endOfRead"  )
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="handle_sonar_start",cond=whenDispatch("sonar_start"))
					transition(edgeName="t08",targetState="handle_sonar_stop",cond=whenDispatch("sonar_stop"))
				}	 
				state("handle_sonar_stop") { //this:State
					action { //it:State
						 process.destroy();  
						CommUtils.outblue("SONAR STOPPED")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handle_sonar_stop",cond=whenDispatch("sonar_stop"))
				}	 
			}
		}
} 
