/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.utils.LedState

class Led ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val configurator = main.resources.configuration.SystemConfigurator
		
				var STATE=LedState.OFF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("$name starts")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="init_mqtt", cond=doswitch() )
				}	 
				state("init_mqtt") { //this:State
					action { //it:State
						connectToMqttBroker( "${configurator.getProperty("mqtt_broker_uri")}" )
						subscribe(  "system_state" ) //mqtt.subscribe(this,topic)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outred("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handle_update_mode",cond=whenEvent("system_state"))
				}	 
				state("handle_update_mode") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													val RP=payloadArg(0).toInt()
													val A=payloadArg(1).toBoolean()
													val B=payloadArg(2).toBoolean()
													val AL=payloadArg(3).toDouble()
													val LS=payloadArg(6)
													
													if(B){
														STATE=LedState.ON;
													}else if(RP==0 || AL==1.0){
														STATE=LedState.BLINKING
													}else{
														STATE=LedState.OFF
													}
								if(  LS!=STATE.toString() 
								 ){//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(led_state,$STATE)" ) 
								publish(MsgUtil.buildEvent(name,"actor_state","actor_state(led_state,$STATE)").toString(), "actor_state" )   
								CommUtils.outred("$name: mode: $STATE")
								forward("update_led_mode", "update_led_mode($STATE)" ,"led_device" ) 
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
