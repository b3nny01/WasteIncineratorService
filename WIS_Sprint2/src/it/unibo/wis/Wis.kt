/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		 		var RP = 0
		 		var A = false
		 		var B = false 
		 		var L = 0.0
		 		val DLIMT = 5.0
		 		val DMAX = 30.0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name starts")
						observeResource("localhost","8022","ctx_wis","scale","actor_state")
						observeResource("localhost","8022","ctx_wis","incinerator","actor_state")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="activate_incinerator", cond=doswitch() )
				}	 
				state("activate_incinerator") { //this:State
					action { //it:State
						
									val AR=true	
						CommUtils.outyellow("$name: activating incinerator")
						forward("incinerator_activation", "incinerator_activation($AR)" ,"incinerator" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_updates", cond=doswitch() )
				}	 
				state("waiting_for_updates") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: waiting for updates...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t020",targetState="update_state",cond=whenDispatch("actor_state"))
					transition(edgeName="t021",targetState="handle_system_state_req",cond=whenRequest("system_state_req"))
				}	 
				state("update_state") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("actor_state(P,V)"), Term.createTerm("actor_state(P,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val P=payloadArg(0);
												val V=payloadArg(1);
												when (P){
													"incinerator_active" -> A=V.toBoolean()
													"incinerator_burning"-> B=V.toBoolean()
													"waste_storage_rps"  -> RP=V.toInt()
													"ash_storage_level"  -> L=V.toDouble()
												}
								if(  (L == DLIMT || L >= DMAX)  
								 ){forward("ledBlink", "ledBlink($L)" ,"led" ) 
								CommUtils.outblack("$name: SENT BLINK TO LED")
								}
								if(  B  
								 ){forward("ledOn", "ledOn($B)" ,"led" ) 
								CommUtils.outblack("$name: SENT ON TO LED")
								}
								else
								 {forward("ledOff", "ledOff($B)" ,"led" ) 
								 CommUtils.outblack("$name: SENT OFF TO LED")
								 }
								updateResourceRep( "system_state($RP,$A,$B,$L)"  
								)
								CommUtils.outyellow("$name: $P updated")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_updates", cond=doswitch() )
				}	 
				state("handle_system_state_req") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: current state { RP:$RP,A:$A, B:$B, L:$L }")
						answer("system_state_req", "system_state_repl", "system_state_repl($RP,$A,$B,$L)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_updates", cond=doswitch() )
				}	 
			}
		}
} 
