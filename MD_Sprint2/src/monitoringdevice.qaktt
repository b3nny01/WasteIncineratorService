System monitoring_device 

Dispatch 	sonarstart  : sonarstart(X)
Dispatch 	sonarstop   : sonarstop(X)

Event 		sonardata   : distance(D)

Dispatch	actor_state	: actor_state(P,V)

Dispatch 	doread 	    : doread(X)

Dispatch 	ledOn       : ledOn(X)       
Dispatch 	ledOff 	    : ledOff(X) 
Dispatch	ledBlink    : ledBlink(X)

Event 		unload_ash	: unload_ash(N)

Context ctx_monitoring_device ip [ host= "localhost" 	port=8012 ]
Context ctx_wis   		   	  ip [ host= "10.0.0.1"		port=8022 ] 

ExternalQActor wis context ctx_wis


QActor sonar24 context ctx_monitoring_device{
	
	[# var D = 0 #]
	State s0 initial{
		println("$name STARTS") color magenta
		delay 1000
		forward sonardevice -m sonarstart : sonarstart(1)			
		subscribeTo datacleaner for sonardata
	}
	Transition t0 whenEvent sonardata -> handleData
	
	State handleData{
		 onMsg(sonardata : distance(D)) {
		 	[#  D = payloadArg(0).toInt() #]
		 	println("$name: ash storage distance: $D") color magenta
 			forward wis -m actor_state : actor_state(ash_storage_level,$D)
    	}
	}	
	Transition t0 whenEvent sonardata -> handleData
}


QActor datacleaner context ctx_monitoring_device{
	
	[# 
		var CURRENT = 0
		var PREVIOUS = 0
	#]
	State s0 initial{
		println("$name STARTS") color cyan
		delay 1000
		subscribeTo sonardevice for sonardata		
		println("$name subscribed to sonardevice") color cyan
	}
	Transition t0 whenEvent sonardata -> filter
	
	State filter{
		onMsg( sonardata : distance(D) ){
	      	[#  CURRENT = payloadArg(0).toInt() #]	      	
	      	//println("$name D=$D") color cyan
	      	//TODO: quanta cenere per ogni rp?
	      	if [# CURRENT >= (PREVIOUS + 3) || CURRENT <= (PREVIOUS - 3) #] {
	     		emitlocalstream sonardata : distance($CURRENT)
	     		[# PREVIOUS = CURRENT #]
	     	}
    	}
	}	
	Transition t0 whenEvent sonardata -> filter
}


QActor sonardevice context ctx_monitoring_device {
	
	[# 
		lateinit var reader : java.io.BufferedReader
		var working = false
	    lateinit var process : Process	
	    var Distance = 0
	#]	
	
	
	State s0 initial {
		println("$name STARTS") color blue
	}		
	Transition t0 whenMsg sonarstart -> startSonar
		
	State startSonar{
		[#
    	working = true		
		process = Runtime.getRuntime().exec("python sonar.py")
		reader  = java.io.BufferedReader(  java.io.InputStreamReader(process.getInputStream() ))	
		#]	
		println("SONAR STARTS") color blue
		delay 1000
	}
	Goto readSonarData
	
	
	State readSonarData{ 
		[# 
		var data = reader.readLine()
		CommUtils.outyellow("$name with python: data = $data"   ) 
		if( data != null ){
			try { 
				val vd = data.toFloat()
				val v  = vd.toInt()
				if ( v <= 100 ) {	
					Distance = v				
				}
				else 
					Distance = 0
			} catch(e: Exception){
					CommUtils.outred("$name readSonarDataERROR: $e "   )
			}
		}
		
		#]	
		if [# Distance > 0 #] { 
			emitlocalstream sonardata : distance($Distance)
		}
		autodispatch doread : doread(1)
	}
	Transition t0 whenMsg sonarstop  -> stopSonar
				  whenMsg doread and [# working  #] -> readSonarData 
				  whenMsg doread and [# !working #] -> endOfRead
		
	State endOfRead{
		[#
   	    process.destroy()
    	if (process.isAlive()) {
    	    process.destroyForcibly();
    	}
       	CommUtils.outred("$tt $name | endOfRead"  )
		#]
	}
	Transition t0 whenMsg sonarstart -> startSonar 
				  whenMsg sonarstop  -> stopSonar
		
	State stopSonar {
		[# process.destroy(); #]		
		println("SONAR STOPPED") color blue
	}
	Transition t0 whenMsg sonarstop -> stopSonar
}



QActor led context ctx_monitoring_device{
	
	State s0 initial{
		println("$name START") color red
	}
	Transition t0 whenMsg ledOn -> ledOn
				  whenMsg ledOff -> ledOff
				  whenMsg ledBlink -> ledBlink
				 
	State ledOn{
		printCurrentMessage color red
		[# Runtime.getRuntime().exec("python ledOn24.py")#]
	}
	Transition t0 whenMsg ledOff -> ledOff
				  whenMsg ledBlink -> ledBlink
	
	State ledOff{
		printCurrentMessage color red
		[# Runtime.getRuntime().exec("python ledOff24.py")#]
	}
	Transition t0 whenMsg ledOn -> ledOn
				  whenMsg ledBlink -> ledBlink
				  
	State ledBlink{
		printCurrentMessage color red
		[# Runtime.getRuntime().exec("python ledBlink24.py")#]
	}
	Transition t0 whenMsg ledOn -> ledOn
				  whenMsg ledOff -> ledOff
}
