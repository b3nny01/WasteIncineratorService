/* Generated by AN DISI Unibo */ 
package it.unibo.led_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Led_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var P=Runtime.getRuntime().exec("python ledOff24.py");
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("$name START")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="handle_update_mode",cond=whenDispatch("update_led_mode"))
				}	 
				state("handle_update_mode") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("update_led_mode(M)"), Term.createTerm("update_led_mode(M)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val S=main.resources.utils.LedMode.valueOf(payloadArg(0));
												P.destroy();
												P=when (S){
													main.resources.utils.LedMode.BLINKING 	-> Runtime.getRuntime().exec("python ledBlink24.py")
													main.resources.utils.LedMode.ON			-> Runtime.getRuntime().exec("python ledOn24.py")
													main.resources.utils.LedMode.OFF 		-> Runtime.getRuntime().exec("python ledOff24.py")
												}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="handle_update_mode",cond=whenDispatch("update_led_mode"))
				}	 
			}
		}
} 
