/* Generated by AN DISI Unibo */ 
package it.unibo.led_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.utils.LedState

class Led_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var STATE=LedState.OFF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name starts")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="handle_update_mode",cond=whenDispatch("update_led_mode"))
					transition(edgeName="t017",targetState="handle_led_device_state_req",cond=whenRequest("led_device_state_req"))
				}	 
				state("handle_update_mode") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update_led_mode(M)"), Term.createTerm("update_led_mode(M)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
												STATE=LedState.parseStr(payloadArg(0)); 
								CommUtils.outgreen("$name: mode: $STATE")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_led_device_state_req") { //this:State
					action { //it:State
						answer("led_device_state_req", "led_device_state_repl", "led_device_state_repl($STATE)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
