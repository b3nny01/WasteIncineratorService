/* Generated by AN DISI Unibo */ 
package it.unibo.md_test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Md_test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		 		var OK=true;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name starts")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outcyan("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="test_lb",cond=whenRequest("test_led_burning"))
					transition(edgeName="t04",targetState="test_lews",cond=whenRequest("test_led_empty_ws"))
					transition(edgeName="t05",targetState="test_lfas",cond=whenRequest("test_led_full_as"))
				}	 
				state("test_lb") { //this:State
					action { //it:State
						CommUtils.outcyan("$name: test sonar burning")
						
									OK=true	
						forward("set_system_state", "system_state(3,true,false,0,moved_bi,off)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="lb_check_led_device_off_1",cond=whenReply("led_device_state_repl"))
				}	 
				state("lb_check_led_device_off_1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="off")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set_burning_true", cond=doswitchGuarded({ OK  
					}) )
					transition( edgeName="goto",targetState="end_lb_test", cond=doswitchGuarded({! ( OK  
					) }) )
				}	 
				state("set_burning_true") { //this:State
					action { //it:State
						forward("set_system_state", "system_state(3,true,true,0,rp_unloaded,off)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="lb_check_led_device_blink",cond=whenReply("led_device_state_repl"))
				}	 
				state("lb_check_led_device_blink") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="blinking")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set_burning_false", cond=doswitchGuarded({ OK  
					}) )
					transition( edgeName="goto",targetState="end_lb_test", cond=doswitchGuarded({! ( OK  
					) }) )
				}	 
				state("set_burning_false") { //this:State
					action { //it:State
						forward("set_system_state", "system_state(3,true,false,0,waiting,blinking)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="lb_check_led_device_off_2",cond=whenReply("led_device_state_repl"))
				}	 
				state("lb_check_led_device_off_2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="off")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end_lb_test", cond=doswitch() )
				}	 
				state("end_lb_test") { //this:State
					action { //it:State
						answer("test_led_burning", "test_repl", "test_repl($OK)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("test_lews") { //this:State
					action { //it:State
						CommUtils.outcyan("$name: test sonar empty waste storage")
						
									OK=true	
						forward("set_system_state", "system_state(1,true,false,0,moving_ws,off)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="lews_check_led_device_off_1",cond=whenReply("led_device_state_repl"))
				}	 
				state("lews_check_led_device_off_1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="off")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set_empty_waste_storage", cond=doswitchGuarded({ OK  
					}) )
					transition( edgeName="goto",targetState="end_lews_test", cond=doswitchGuarded({! ( OK  
					) }) )
				}	 
				state("set_empty_waste_storage") { //this:State
					action { //it:State
						forward("set_system_state", "system_state(0,true,false,0,rp_loaded,off)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="lews_check_led_device_on",cond=whenReply("led_device_state_repl"))
				}	 
				state("lews_check_led_device_on") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="on")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set_full_waste_storage", cond=doswitchGuarded({OK 
					}) )
					transition( edgeName="goto",targetState="end_lews_test", cond=doswitchGuarded({! (OK 
					) }) )
				}	 
				state("set_full_waste_storage") { //this:State
					action { //it:State
						forward("set_system_state", "system_state(3,true,false,0,rp_loaded,off)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="lews_check_led_device_off_2",cond=whenReply("led_device_state_repl"))
				}	 
				state("lews_check_led_device_off_2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="off")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end_lews_test", cond=doswitch() )
				}	 
				state("end_lews_test") { //this:State
					action { //it:State
						answer("test_led_empty_ws", "test_repl", "test_repl($OK)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("test_lfas") { //this:State
					action { //it:State
						CommUtils.outcyan("$name: test sonar empty waste storage")
						
									OK=true	
						forward("set_system_state", "system_state(3,true,false,0,unloading_ash,off)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="lfas_check_led_device_off_1",cond=whenReply("led_device_state_repl"))
				}	 
				state("lfas_check_led_device_off_1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="off")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set_full_ash_storage", cond=doswitchGuarded({ OK  
					}) )
					transition( edgeName="goto",targetState="end_lfas_test", cond=doswitchGuarded({! ( OK  
					) }) )
				}	 
				state("set_full_ash_storage") { //this:State
					action { //it:State
						forward("set_system_state", "system_state(3,true,false,1,ash_unloaded,off)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="lfas_check_led_device_on",cond=whenReply("led_device_state_repl"))
				}	 
				state("lfas_check_led_device_on") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="on")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set_empty_ash_storage", cond=doswitchGuarded({OK 
					}) )
					transition( edgeName="goto",targetState="end_lfas_test", cond=doswitchGuarded({! (OK 
					) }) )
				}	 
				state("set_empty_ash_storage") { //this:State
					action { //it:State
						forward("set_system_state", "system_state(3,true,false,0,ash_loaded,on)" ,"wis" ) 
						delay(500) 
						request("led_device_state_req", "led_device_state_req" ,"led_device" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="lfas_check_led_device_off_2",cond=whenReply("led_device_state_repl"))
				}	 
				state("lfas_check_led_device_off_2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("led_device_state_repl(S)"), Term.createTerm("led_device_state_repl(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=(payloadArg(0)=="off")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end_lfas_test", cond=doswitch() )
				}	 
				state("end_lfas_test") { //this:State
					action { //it:State
						answer("test_led_full_as", "test_repl", "test_repl($OK)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
