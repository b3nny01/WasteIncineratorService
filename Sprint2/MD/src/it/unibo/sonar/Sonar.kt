/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonar ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name starts")
						delay(500) 
						forward("sonar_start", "sonarstart(1)" ,"sonar_device" ) 
						subscribeToLocalActor("data_cleaner") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handle_data",cond=whenEvent("sonar_clean_data"))
				}	 
				state("handle_data") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("clean_data(D,MIND,MAXD)"), Term.createTerm("clean_data(D,MIND,MAXD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  
										 		val D = payloadArg(0).toDouble()
										 		val MIN_D= payloadArg(1).toDouble()
										 		val MAX_D= payloadArg(2).toDouble()
										 				 		
										 		val ASH_LEVEL=(MAX_D-D)/(MAX_D-MIN_D) 
								updateResourceRep( "actor_state(ash_storage_level,$ASH_LEVEL)"  
								)
								CommUtils.outmagenta("$name: ash level: $ASH_LEVEL")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
