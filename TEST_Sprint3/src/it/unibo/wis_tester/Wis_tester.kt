/* Generated by AN DISI Unibo */ 
package it.unibo.wis_tester

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Wis_tester ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val configurator = main.resources.configuration.SystemConfigurator
		 
		 		var OK=false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name starts")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="check_n1",cond=whenDispatch("check"))
				}	 
				state("check_n1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													val RP=payloadArg(0).toInt()
													val A=payloadArg(1).toBoolean()
													val B=payloadArg(2).toBoolean()
													val AL=payloadArg(3).toDouble()
													val ORS=payloadArg(4)
													val ORP=payloadArg(5)
													val LS=payloadArg(6) 
													
													OK=(RP==5 && A && AL==0.0)
								if(  OK  
								 ){CommUtils.outgreen("$name: [1/4] test_check_n1: $OK")
								}
								else
								 {CommUtils.outred("$name: [1/4] test_check_n1: $OK")
								  System.exit(1)  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="check_n2",cond=whenDispatch("check"))
				}	 
				state("check_n2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													val RP=payloadArg(0).toInt()
													val A=payloadArg(1).toBoolean()
													val B=payloadArg(2).toBoolean()
													val AL=payloadArg(3).toDouble()
													val ORS=payloadArg(4)
													val ORP=payloadArg(5)
													val LS=payloadArg(6) 
													
													OK=(RP==4 && A && AL==(1.0/3))
								if(  OK  
								 ){CommUtils.outgreen("$name: [2/4] test_check_n2: $OK")
								}
								else
								 {CommUtils.outred("$name: [2/4] test_check_n2: $OK")
								  System.exit(1)  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="check_n3",cond=whenDispatch("check"))
				}	 
				state("check_n3") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													val RP=payloadArg(0).toInt()
													val A=payloadArg(1).toBoolean()
													val B=payloadArg(2).toBoolean()
													val AL=payloadArg(3).toDouble()
													val ORS=payloadArg(4)
													val ORP=payloadArg(5)
													val LS=payloadArg(6) 
													
													OK=(RP==3 && A && AL==(2.0/3))
								if(  OK  
								 ){CommUtils.outgreen("$name: [3/4] test_check_n3: $OK")
								}
								else
								 {CommUtils.outred("$name: [3/4] test_check_n3: $OK")
								  System.exit(1)  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="check_n4",cond=whenDispatch("check"))
				}	 
				state("check_n4") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													val RP=payloadArg(0).toInt()
													val A=payloadArg(1).toBoolean()
													val B=payloadArg(2).toBoolean()
													val AL=payloadArg(3).toDouble()
													val ORS=payloadArg(4)
													val ORP=payloadArg(5)
													val LS=payloadArg(6) 
													
													OK=(RP==2 && A && AL==1.0)
								if(  OK  
								 ){CommUtils.outgreen("$name: [4/4] test_check_n4: $OK")
								 System.exit(0)  
								}
								else
								 {CommUtils.outred("$name: [4/4] test_check_n4: $OK")
								  System.exit(1)  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
