/* Generated by AN DISI Unibo */ 
package it.unibo.scale

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Scale ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		 		var ROLL_PACKETS=5
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name starts")
						delay(500) 
						updateResourceRep( "actor_state(waste_storage_rps,$ROLL_PACKETS)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_s0", 
				 	 					  scope, context!!, "local_tout_"+name+"_s0", 1000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t02",targetState="idle",cond=whenTimeout("local_tout_"+name+"_s0"))   
					transition(edgeName="t03",targetState="handle_set_rp_number",cond=whenDispatch("set_rp_number"))
				}	 
				state("handle_set_rp_number") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("set_rp_number(V)"), Term.createTerm("set_rp_number(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												ROLL_PACKETS= payloadArg(0).toInt()	
								updateResourceRep( "actor_state(waste_storage_rps,$ROLL_PACKETS)"  
								)
								CommUtils.outblue("$name: setting RP number: $ROLL_PACKETS")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outblue("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handle_load_rp",cond=whenEvent("load_rp"))
				}	 
				state("handle_load_rp") { //this:State
					action { //it:State
						
									var R=false
									if(ROLL_PACKETS>0){
										ROLL_PACKETS--
									}
						updateResourceRep( "actor_state(waste_storage_rps,$ROLL_PACKETS)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
