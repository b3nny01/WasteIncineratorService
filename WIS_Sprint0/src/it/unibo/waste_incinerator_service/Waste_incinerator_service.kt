/* Generated by AN DISI Unibo */ 
package it.unibo.waste_incinerator_service

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Waste_incinerator_service ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		 		var ok=true;	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name starts")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="request_waste_storage_state", cond=doswitch() )
				}	 
				state("request_waste_storage_state") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: requesting waste storage state")
						request("waste_storage_state_request", "waste_storage_state_request" ,"waste_storage" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handle_waste_storage_state_reply",cond=whenReply("waste_storage_state_reply"))
				}	 
				state("handle_waste_storage_state_reply") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("waste_storage_state_reply(N)"), Term.createTerm("waste_storage_state_reply(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val N = payloadArg(0).toInt()
												ok = N>0
								CommUtils.outyellow("$name: waste storage contains $N roll packets")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="request_ash_storage_state", cond=doswitchGuarded({ ok  
					}) )
					transition( edgeName="goto",targetState="handle_waste_storage_empty", cond=doswitchGuarded({! ( ok  
					) }) )
				}	 
				state("handle_waste_storage_empty") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: waste storage is empty, waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("request_ash_storage_state") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: requesting ash storage state")
						request("ash_storage_state_request", "ash_storage_state_request" ,"ash_storage" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handle_ash_storage_state_reply",cond=whenReply("ash_storage_state_reply"))
				}	 
				state("handle_ash_storage_state_reply") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ash_storage_state_reply(N)"), Term.createTerm("ash_storage_state_reply(L)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val L = payloadArg(0).toFloat();
												ok = L<100.0
								CommUtils.outyellow("$name: ash storage is $L% full")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="request_incinerator_state", cond=doswitchGuarded({ ok  
					}) )
					transition( edgeName="goto",targetState="handle_ash_storage_empty", cond=doswitchGuarded({! ( ok  
					) }) )
				}	 
				state("handle_ash_storage_empty") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: ash storage is full, waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("request_incinerator_state") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
