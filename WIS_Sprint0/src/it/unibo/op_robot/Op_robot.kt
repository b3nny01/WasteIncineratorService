/* Generated by AN DISI Unibo */ 
package it.unibo.op_robot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Op_robot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name starts")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handle_cmd_move",cond=whenRequest("cmd_move"))
					transition(edgeName="t01",targetState="handle_cmd_add_rp",cond=whenRequest("cmd_add_rp"))
				}	 
				state("handle_cmd_move") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd_move(D)"), Term.createTerm("cmd_move(DEST)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val DEST=payloadArg(0)	
								CommUtils.outgreen("$name: moving to $DEST...")
								delay(2000) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="cmd_move_reply", cond=doswitch() )
				}	 
				state("cmd_move_reply") { //this:State
					action { //it:State
						
									val RESULT=true
						CommUtils.outgreen("$name: end of movement")
						answer("cmd_move", "cmd_reply", "cmd_reply($RESULT)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_cmd_add_rp") { //this:State
					action { //it:State
						
									val RESULT=true
						CommUtils.outgreen("$name: loading an RP")
						answer("cmd_add_rp", "cmd_reply", "cmd_reply($RESULT)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
