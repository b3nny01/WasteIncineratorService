/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val configurator = main.resources.configuration.SystemConfigurator
		
		 		var RP = 0
		 		var A = false
		 		var B = false 
		 		var L = 0.0
		 		var O = ""
		 		var LS="off"
		 		var END=false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name starts")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="start_test",cond=whenRequest("test_req"))
				}	 
				state("start_test") { //this:State
					action { //it:State
						CommUtils.outcyan("$name: starting test")
						connectToMqttBroker( "${configurator.getProperty("mqtt_broker_uri")}" )
						subscribe(  "system_state" ) //mqtt.subscribe(this,topic)
						request("system_state_req", "system_state_req" ,"wis" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t023",targetState="handle_system_state_repl",cond=whenReply("system_state_repl"))
				}	 
				state("handle_system_state_repl") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state_repl(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state_repl(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												RP=payloadArg(0).toInt()
												A=payloadArg(1).toBoolean();
												B=payloadArg(2).toBoolean();
												L=payloadArg(3).toDouble();
												O=payloadArg(4)
												LS=payloadArg(6)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check_end", cond=doswitch() )
				}	 
				state("check_end") { //this:State
					action { //it:State
						
									END=(RP==0) || (L==1.0)	
						CommUtils.outblack("$name: end of test: $END")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_for_updates", cond=doswitchGuarded({!END 
					}) )
					transition( edgeName="goto",targetState="end_test", cond=doswitchGuarded({! (!END 
					) }) )
				}	 
				state("wait_for_updates") { //this:State
					action { //it:State
						CommUtils.outcyan("$name: waiting for updates...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t024",targetState="handle_update",cond=whenEvent("system_state"))
				}	 
				state("handle_update") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												RP=payloadArg(0).toInt()
												A=payloadArg(1).toBoolean()
												B=payloadArg(2).toBoolean()
												L=payloadArg(3).toDouble()
												O=payloadArg(4)
												LS=payloadArg(6)
												
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check_end", cond=doswitch() )
				}	 
				state("end_test") { //this:State
					action { //it:State
						CommUtils.outblack("$name: ending test")
						answer("test_req", "test_repl", "test_repl($RP,$A,$B,$L,$O,$LS)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
