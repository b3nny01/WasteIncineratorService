/* Generated by AN DISI Unibo */ 
package it.unibo.op_robot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.utils.Position
import main.resources.utils.Location
import main.resources.utils.OpRobotState

class Op_robot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val configurator = main.resources.configuration.SystemConfigurator
		
				var OK=false
				val LOCATIONS=mapOf( Location.HOME  		to Position(0,0),
									 Location.WASTE_STORAGE to Position(0,4),
									 Location.BURN_IN		to Position(3,1),
									 Location.BURN_OUT		to Position(5,3),
									 Location.ASH_STORAGE	to Position(6,4)
				)
				val STEP_TIME=configurator.getProperty("op_robot.step_time").toInt()
				var TARGET_LOCATION=Location.HOME
				var OP_ROBOT_STATE=OpRobotState.INIT;
				var OP_ROBOT_POS:Position?=Position(0,0)
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name starts")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="init_mqtt", cond=doswitch() )
				}	 
				state("init_mqtt") { //this:State
					action { //it:State
						connectToMqttBroker( "ws://localhost:9001" )
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage_robot", cond=doswitch() )
				}	 
				state("engage_robot") { //this:State
					action { //it:State
						 OP_ROBOT_STATE=OpRobotState.ENGAGING  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outyellow("$name: engaging robot")
						request("engage", "engage(wis,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handle_engage_robot_repl",cond=whenReply("engagedone"))
				}	 
				state("handle_engage_robot_repl") { //this:State
					action { //it:State
						
									OK = false
						if( checkMsgContent( Term.createTerm("engagedone(ARG)"), Term.createTerm("engagedone(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												OK=true	
						}
						 OP_ROBOT_STATE=OpRobotState.ENGAGED  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outyellow("$name: robot engaged: $OK")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check_start_conditions", cond=doswitchGuarded({ OK  
					}) )
					transition( edgeName="goto",targetState="engage_robot", cond=doswitchGuarded({! ( OK  
					) }) )
				}	 
				state("check_start_conditions") { //this:State
					action { //it:State
						delay(500) 
						 OP_ROBOT_STATE=OpRobotState.CHECKING  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: checking conditions")
						request("system_state_req", "system_state_req" ,"wis" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handle_start_conditions_verified_repl",cond=whenReply("system_state_repl"))
				}	 
				state("handle_start_conditions_verified_repl") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state_repl(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state_repl(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val RP=payloadArg(0).toInt()
												val A=payloadArg(1).toBoolean()
												val B=payloadArg(2).toBoolean()
												val L=payloadArg(3).toDouble()
												OK=(RP>0) && (A && !B) && (L<1.0)
						}
						 OP_ROBOT_STATE=OpRobotState.CHECKED  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: conditions verified: $OK")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="move_to_waste_storage", cond=doswitchGuarded({ OK  
					}) )
					transition( edgeName="goto",targetState="check_start_conditions", cond=doswitchGuarded({! ( OK  
					) }) )
				}	 
				state("move_to_waste_storage") { //this:State
					action { //it:State
						
									TARGET_LOCATION=Location.WASTE_STORAGE
									val X=LOCATIONS[TARGET_LOCATION]?.x
									val Y=LOCATIONS[TARGET_LOCATION]?.y
						 OP_ROBOT_STATE=OpRobotState.MOVING_WS  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: moving to $TARGET_LOCATION...")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="load_rp",cond=whenReply("moverobotdone"))
					transition(edgeName="t08",targetState="move_to_waste_storage",cond=whenReply("moverobotfailed"))
				}	 
				state("load_rp") { //this:State
					action { //it:State
						 OP_ROBOT_STATE=OpRobotState.MOVED_WS  
						 OP_ROBOT_POS=LOCATIONS[Location.WASTE_STORAGE]  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_pos,$OP_ROBOT_POS)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_pos,$OP_ROBOT_POS)").toString(), "actor_state" )   
						delay(100) 
						 OP_ROBOT_STATE=OpRobotState.RP_LOADING  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: loading an rp")
						delay(1000) 
						 OP_ROBOT_STATE=OpRobotState.RP_LOADED  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="move_to_burn_in", cond=doswitch() )
				}	 
				state("move_to_burn_in") { //this:State
					action { //it:State
						
									TARGET_LOCATION=Location.BURN_IN
									val X=LOCATIONS[TARGET_LOCATION]?.x
									val Y=LOCATIONS[TARGET_LOCATION]?.y
						 OP_ROBOT_STATE=OpRobotState.MOVING_BI  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: moving to $TARGET_LOCATION...")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="request_to_burn",cond=whenReply("moverobotdone"))
					transition(edgeName="t010",targetState="move_to_burn_in",cond=whenReply("moverobotfailed"))
				}	 
				state("request_to_burn") { //this:State
					action { //it:State
						 OP_ROBOT_STATE=OpRobotState.MOVED_BI  
						 OP_ROBOT_POS=LOCATIONS[Location.BURN_IN]  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_pos,$OP_ROBOT_POS)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_pos,$OP_ROBOT_POS)").toString(), "actor_state" )   
						delay(100) 
						 OP_ROBOT_STATE=OpRobotState.RP_UNLOADING  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: requesting to burn an rp")
						request("burn_req", "burn_req" ,"incinerator" )  
						delay(1000) 
						 OP_ROBOT_STATE=OpRobotState.RP_UNLOADED  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="return_to_home", cond=doswitch() )
				}	 
				state("return_to_home") { //this:State
					action { //it:State
						
									TARGET_LOCATION=Location.HOME
									val X=LOCATIONS[TARGET_LOCATION]?.x
									val Y=LOCATIONS[TARGET_LOCATION]?.y
						 OP_ROBOT_STATE=OpRobotState.MOVING_H  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: moving to $TARGET_LOCATION...")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="wait_for_burn_repl",cond=whenReply("moverobotdone"))
					transition(edgeName="t012",targetState="return_to_home",cond=whenReply("moverobotfailed"))
				}	 
				state("wait_for_burn_repl") { //this:State
					action { //it:State
						 OP_ROBOT_STATE=OpRobotState.MOVED_H  
						 OP_ROBOT_POS=LOCATIONS[Location.HOME]  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_pos,$OP_ROBOT_POS)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_pos,$OP_ROBOT_POS)").toString(), "actor_state" )   
						delay(100) 
						 OP_ROBOT_STATE=OpRobotState.WAITING  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: waiting end of burning...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="handle_burn_repl",cond=whenReply("burn_repl"))
				}	 
				state("handle_burn_repl") { //this:State
					action { //it:State
						
									OK=payloadArg(0).toBoolean()	
						CommUtils.outgreen("$name: burn request result: $OK")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="move_to_burn_out", cond=doswitch() )
				}	 
				state("move_to_burn_out") { //this:State
					action { //it:State
						
									TARGET_LOCATION=Location.BURN_OUT
									val X=LOCATIONS[TARGET_LOCATION]?.x
									val Y=LOCATIONS[TARGET_LOCATION]?.y
						 OP_ROBOT_STATE=OpRobotState.MOVING_BO  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: moving to $TARGET_LOCATION...")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="load_ash",cond=whenReply("moverobotdone"))
					transition(edgeName="t015",targetState="move_to_burn_out",cond=whenReply("moverobotfailed"))
				}	 
				state("load_ash") { //this:State
					action { //it:State
						 OP_ROBOT_STATE=OpRobotState.MOVED_BO  
						 OP_ROBOT_POS=LOCATIONS[Location.BURN_OUT]  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_pos,$OP_ROBOT_POS)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_pos,$OP_ROBOT_POS)").toString(), "actor_state" )   
						delay(100) 
						 OP_ROBOT_STATE=OpRobotState.ASH_LOADING  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: loading ash")
						delay(1000) 
						 OP_ROBOT_STATE=OpRobotState.ASH_LOADED  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="move_to_ash_storage", cond=doswitch() )
				}	 
				state("move_to_ash_storage") { //this:State
					action { //it:State
						
									TARGET_LOCATION=Location.ASH_STORAGE
									val X=LOCATIONS[TARGET_LOCATION]?.x
									val Y=LOCATIONS[TARGET_LOCATION]?.y
						 OP_ROBOT_STATE=OpRobotState.MOVING_AS  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: moving to $TARGET_LOCATION...")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="unload_ash",cond=whenReply("moverobotdone"))
				}	 
				state("unload_ash") { //this:State
					action { //it:State
						 OP_ROBOT_STATE=OpRobotState.MOVED_AS  
						 OP_ROBOT_POS=LOCATIONS[Location.ASH_STORAGE]  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_pos,$OP_ROBOT_POS)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_pos,$OP_ROBOT_POS)").toString(), "actor_state" )   
						delay(100) 
						 OP_ROBOT_STATE=OpRobotState.ASH_UNLOADING  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("name: unloading ash...")
						delay(3000) 
						 OP_ROBOT_STATE=OpRobotState.ASH_UNLOADED  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check_continue_conditions", cond=doswitch() )
				}	 
				state("check_continue_conditions") { //this:State
					action { //it:State
						 OP_ROBOT_STATE=OpRobotState.CHECKING  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: checking conditions")
						request("system_state_req", "system_state_req" ,"wis" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t017",targetState="handle_continue_conditions_verified_repl",cond=whenReply("system_state_repl"))
				}	 
				state("handle_continue_conditions_verified_repl") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("system_state_repl(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), Term.createTerm("system_state_repl(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val RP=payloadArg(0).toInt()
												val A=payloadArg(1).toBoolean();
												val B=payloadArg(2).toBoolean();
												val L=payloadArg(3).toDouble();
												val O=payloadArg(4)
												OK=(RP>0) && (A && !B) && (L<1.0)
						}
						 OP_ROBOT_STATE=OpRobotState.CHECKED  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: conditions verified: $OK")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="move_to_waste_storage", cond=doswitchGuarded({OK 
					}) )
					transition( edgeName="goto",targetState="move_to_home", cond=doswitchGuarded({! (OK 
					) }) )
				}	 
				state("move_to_home") { //this:State
					action { //it:State
						
									TARGET_LOCATION=Location.HOME
									val X=LOCATIONS[TARGET_LOCATION]?.x
									val Y=LOCATIONS[TARGET_LOCATION]?.y
						 OP_ROBOT_STATE=OpRobotState.MOVING_H  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(op_robot_state,$OP_ROBOT_STATE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(op_robot_state,$OP_ROBOT_STATE)").toString(), "actor_state" )   
						delay(100) 
						CommUtils.outgreen("$name: moving to $TARGET_LOCATION...")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="check_start_conditions",cond=whenReply("moverobotdone"))
					transition(edgeName="t019",targetState="move_to_home",cond=whenReply("moverobotfailed"))
				}	 
			}
		}
} 
