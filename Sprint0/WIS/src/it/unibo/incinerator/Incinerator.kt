/* Generated by AN DISI Unibo */ 
package it.unibo.incinerator

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Incinerator ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		 		var ACTIVE	   = false;
		 		var BURNING    = false;
		 		var BURNOUT_FREE = true;		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("$name STARTS")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outred("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleActivation",cond=whenDispatch("activationCommand"))
				}	 
				state("handleActivation") { //this:State
					action { //it:State
						 
									var RESULT=false
						if( checkMsgContent( Term.createTerm("activationCommand(A)"), Term.createTerm("activationCommand(A)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												ACTIVE=payloadArg(0).toBoolean()
												RESULT=true
						}
						CommUtils.outred("$name: handling activation request, result:$RESULT")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="endOfBurning", cond=doswitch() )
				}	 
				state("startBurning") { //this:State
					action { //it:State
						
									BURNING = true
						CommUtils.outred("$name: starting incineration process, burning:$BURNING")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="endOfBurning", cond=doswitch() )
				}	 
				state("endOfBurning") { //this:State
					action { //it:State
						
									BURNING = false
						CommUtils.outred("$name: ending incineration process, burning:$BURNING")
						emit("endOfBurning", "endOfBurning(10)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
