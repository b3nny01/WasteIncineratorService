/* Generated by AN DISI Unibo */ 
package it.unibo.monitoring_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Monitoring_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
		 		var CURR_ASH_LEVEL = 0.0
		 		val MAX_ASH_LEVEL = 3.0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name starts")
						delay(500) 
						
									val ASH_LEVEL=CURR_ASH_LEVEL/MAX_ASH_LEVEL	
						updateResourceRep( "actor_state(ash_storage_level,$ASH_LEVEL)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handle_unload_ash",cond=whenEvent("unload_ash"))
				}	 
				state("handle_unload_ash") { //this:State
					action { //it:State
						
									var R=false
									if(CURR_ASH_LEVEL<MAX_ASH_LEVEL){
										R=true
										CURR_ASH_LEVEL++
									}
									
						CommUtils.outmagenta("$name: handling ash request, result:$R")
						
									val ASH_LEVEL=CURR_ASH_LEVEL/MAX_ASH_LEVEL	
						updateResourceRep( "actor_state(ash_storage_level,$ASH_LEVEL)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
