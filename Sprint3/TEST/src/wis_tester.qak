System wis_tester                             

Event 		system_state				: system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)
Dispatch 	check						: system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)

//Contexts===================================================================================
Context ctx_wis_tester 		  ip 	[	host="localhost"		port=8022]  

//ExternalActors declaration=================================================================

//WIS tester=================================================================================
QActor wis_observer context ctx_wis_tester withobj configurator using "main.resources.configuration.SystemConfigurator"{
	State s0 initial{ 	 	 
 		println("$name starts") color yellow
	} Goto init_mqtt
	
	State init_mqtt{
		connectToMqttBroker "${configurator.getProperty(\"mqtt_broker_uri\")}"
		subscribe "system_state"
	} Transition t0 whenEvent system_state -> idle
	
	State idle
	{
	}Transition t0 whenEvent system_state -> check_system_state
	
	State check_system_state{
			onMsg(system_state:system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)){
			[#
					val RP=payloadArg(0)
					val A=payloadArg(1)
					val B=payloadArg(2)
					val AL=payloadArg(3)
					val ORS=payloadArg(4)
					val ORP=payloadArg(5)
					val LS=payloadArg(6) 
			#]
			if[# ORS=="checked" #]
			{
				forward wis_tester -m check:system_state($RP,$A,$B,$AL,$ORS,$ORP,$LS)
			}
			}	
	}Goto idle

}

QActor wis_tester context ctx_wis_tester withobj configurator using "main.resources.configuration.SystemConfigurator"{
 	[# 
 		var OK=false
 	#]
 	
 	State s0 initial{ 	 	 
 		println("$name starts") color green
	} Transition t0 whenMsg check->check_n1
	
	State check_n1{
		onMsg(check:system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)){
			[#
					val RP=payloadArg(0).toInt()
					val A=payloadArg(1).toBoolean()
					val B=payloadArg(2).toBoolean()
					val AL=payloadArg(3).toDouble()
					val ORS=payloadArg(4)
					val ORP=payloadArg(5)
					val LS=payloadArg(6) 
					
					OK=(RP==5 && A && AL==0.0)
			#]
			if[# OK #]{
				println("$name: [1/4] test_check_n1: $OK") color green
			}else{
				println("$name: [1/4] test_check_n1: $OK") color red
				[# System.exit(1) #]
			}
		}
		
	}Transition t0 whenMsg check->check_n2
	
	State check_n2{
		onMsg(check:system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)){
			[#
					val RP=payloadArg(0).toInt()
					val A=payloadArg(1).toBoolean()
					val B=payloadArg(2).toBoolean()
					val AL=payloadArg(3).toDouble()
					val ORS=payloadArg(4)
					val ORP=payloadArg(5)
					val LS=payloadArg(6) 
					
					OK=(RP==4 && A && AL==(1.0/3))
			#]
			if[# OK #]{
				println("$name: [2/4] test_check_n2: $OK") color green
			}else{
				println("$name: [2/4] test_check_n2: $OK") color red
				[# System.exit(1) #]
			}
		}
		
	}Transition t0 whenMsg check->check_n3
	
	State check_n3{
		onMsg(check:system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)){
			[#
					val RP=payloadArg(0).toInt()
					val A=payloadArg(1).toBoolean()
					val B=payloadArg(2).toBoolean()
					val AL=payloadArg(3).toDouble()
					val ORS=payloadArg(4)
					val ORP=payloadArg(5)
					val LS=payloadArg(6) 
					
					OK=(RP==3 && A && AL==(2.0/3))
			#]
			if[# OK #]{
				println("$name: [3/4] test_check_n3: $OK") color green
			}else{
				println("$name: [3/4] test_check_n3: $OK") color red
				[# System.exit(1) #]
			}
		}
		
	}Transition t0 whenMsg check->check_n4
	
	State check_n4{
		onMsg(check:system_state(RP,ACTIVE,BURNING,ASH_LEVEL,OP_ROBOT_STATE,OP_ROBOT_POS,LED_STATE)){
			[#
					val RP=payloadArg(0).toInt()
					val A=payloadArg(1).toBoolean()
					val B=payloadArg(2).toBoolean()
					val AL=payloadArg(3).toDouble()
					val ORS=payloadArg(4)
					val ORP=payloadArg(5)
					val LS=payloadArg(6) 
					
					OK=(RP==2 && A && AL==1.0)
			#]
			if[# OK #]{
				println("$name: [4/4] test_check_n4: $OK") color green
				[# System.exit(0) #]
			}else{
				println("$name: [4/4] test_check_n4: $OK") color red
				[# System.exit(1) #]
			}
		}
		
	}

 }   
                   
                   
                   