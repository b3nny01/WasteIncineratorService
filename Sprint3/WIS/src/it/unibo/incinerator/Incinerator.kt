/* Generated by AN DISI Unibo */ 
package it.unibo.incinerator

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Incinerator ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val configurator = main.resources.configuration.SystemConfigurator
		
		 		var ACTIVE	   = false;
		 		var BURNING    = false;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("$name starts")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="init_mqtt", cond=doswitch() )
				}	 
				state("init_mqtt") { //this:State
					action { //it:State
						connectToMqttBroker( "${configurator.getProperty("mqtt_broker_uri")}" )
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(incinerator_active,$ACTIVE)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(incinerator_active,$ACTIVE)").toString(), "actor_state" )   
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(incinerator_burning,$BURNING)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(incinerator_burning,$BURNING)").toString(), "actor_state" )   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outred("$name: idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handle_activation",cond=whenDispatch("incinerator_activation"))
					transition(edgeName="t01",targetState="handle_burn_req",cond=whenRequest("burn_req"))
				}	 
				state("handle_activation") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("incinerator_activation(ACTIVE)"), Term.createTerm("incinerator_activation(ACTIVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ACTIVE=payloadArg(0).toBoolean()  
								//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(incinerator_active,$ACTIVE)" ) 
								publish(MsgUtil.buildEvent(name,"actor_state","actor_state(incinerator_active,$ACTIVE)").toString(), "actor_state" )   
						}
						CommUtils.outred("$name: handling activation request, active: $ACTIVE")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_burn_req") { //this:State
					action { //it:State
						
									var R=false
									if(!BURNING && ACTIVE){
										BURNING=true
										R=true
									}
									
						CommUtils.outred("$name: handling burn request, result:$BURNING")
						if(  BURNING  
						 ){//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(incinerator_burning,$BURNING)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(incinerator_burning,$BURNING)").toString(), "actor_state" )   
						delay(5000) 
						 BURNING=false  
						//val m = MsgUtil.buildEvent(name, "actor_state", "actor_state(incinerator_burning,$BURNING)" ) 
						publish(MsgUtil.buildEvent(name,"actor_state","actor_state(incinerator_burning,$BURNING)").toString(), "actor_state" )   
						}
						answer("burn_req", "burn_repl", "burn_repl($R)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
